<?xml version="1.0" encoding="UTF-8" ?>    
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onemap.dao.LandblockDao">
	
	<resultMap type="Landblock" id="landblockRs">
		<result column="id" property="id" />
		<result column="blockNumber" property="blockNumber" />
		<result column="blockTypeId" property="blockTypeId" />
		<result column="landTypeId" property="landTypeId" />
		<result column="memo" property="memo" />
		<result column="cooperativeId" property="cooperativeId" />
		<result column="area" property="area" />
		<result column="cropTypeId" property="cropTypeId" />
		<result column="zipcode" property="zipcode" />
		
		<association property="cropType" javaType="CropType">
			<result property="id" column="cropTypeId"/>
			<result property="cropType" column="cropType"/>
			<result property="description" column="cropTypeDesc"/>		    
		 </association>
		 <association property="blockType" javaType="BlockType">
			<result property="id" column="blockTypeId"/>
			<result property="blockType" column="blockType"/>
			<result property="description" column="blockTypeDesc"/>		    
		 </association>
		 <association property="landType" javaType="LandType">
			<result property="id" column="landTypeId"/>
			<result property="landType" column="landType"/>
			<result property="description" column="landTypeDesc"/>		    
		 </association>
		 <association property="cooperative" javaType="Site">
			<result property="id" column="cooperativeId"/>
			<result property="cooperativeNumber" column="cooperativeNumber"/>
			<result property="cooperativeName" column="cooperativeName"/>
		 </association>
		<collection property="whereClause" ofType="Clause">			
		</collection>		
	</resultMap>
	
	<sql id="fieldsForInsert">
		blockNumber,blockTypeId,landTypeId,cooperativeId,area, cropTypeId,zipcode
	</sql>
	<sql id="fields">
		id,<include refid="fieldsForInsert" />
	</sql>
	<sql id="tablename">
		landblock
	</sql>
	<select id="list" resultMap="landblockRs" parameterType="Landblock">
		select
		landblock.id, landblock.memo as memo, blockNumber,blockTypeId,landTypeId,cooperativeId,area, cropTypeId,
        croptype.cropType as cropType,cropType.description as cropTypeDesc,
        blockType.blockType as blockType,blockType.description as blockTypeDesc,
        landType.landType as landType,landType.description as landTypeDesc,
        cooperative.cooperativeNumber as cooperativeNumber, cooperative.cooperativeName as cooperativeName
       from landblock 
		left outer join cropType on landblock.cropTypeId=cropType.id 
		left outer join blockType on landblock.blockTypeId=blockType.id 
		left outer join landtype on landblock.landTypeId = landtype.id
		left outer join cooperative on landblock.cooperativeId = cooperative.id
		<trim prefix="where" prefixOverrides="and |or">

			<if test="cooperativeId != null">
				and cooperativeId = #{cooperativeId}
			</if>
			<if test="id != null">
				and landblock.id = #{id}
			</if>
		</trim>
	</select>
	<select id="listByLimit" resultMap="landblockRs" parameterType="Landblock">
		select
		landblock.id as id, landblock.memo as memo,blockNumber,blockTypeId,landTypeId,cooperativeId,area, cropTypeId,
        croptype.cropType as cropType,cropType.description as cropTypeDesc,
        blockType.blockType as blockType,blockType.description as blockTypeDesc,
        landType.landType as landType,landType.description as landTypeDesc,
        cooperative.cooperativeNumber as cooperativeNumber
       from landblock 
		left outer join cropType on landblock.cropTypeId=cropType.id 
		left outer join blockType on landblock.blockTypeId=blockType.id 
		left outer join landtype on landblock.landTypeId = landtype.id
		left outer join cooperative on landblock.cooperativeId = cooperative.id
		<trim prefix="where" prefixOverrides="and |or">

			<if test="cooperativeId != null">
				and cooperativeId = #{cooperativeId}
			</if>
			<if test="id != null">
				and landblock.id = #{id}
			</if>
			<if test="whereClause != null">
				<foreach item="clause" collection="whereClause" separator=" AND " open="(" close=")"> 
	                ${clause.column} ${clause.operator} #{clause.value} 
	            </foreach> 
			</if>
		</trim>
		<if test="orderBy != null and order != null">
			order by ${orderBy} ${order}
		</if>
		 limit #{startPos} ,#{pageSize}
	</select>
	<select id="count" resultType="Integer" parameterType="Landblock">
		select
		count(*)
		from
		<include refid="tablename" />
		left outer join cropType on landblock.cropTypeId=cropType.id 
		left outer join blockType on landblock.blockTypeId=blockType.id 
		left outer join landtype on landblock.landTypeId = landtype.id
		left outer join cooperative on landblock.cooperativeId = cooperative.id
		<trim prefix="where" prefixOverrides="and |or">

			<if test="cooperativeId != null">
				and cooperativeId = #{cooperativeId}
			</if>
			<if test="id != null">
				and landblock.id = #{id}
			</if>
			<if test="whereClause != null">
				<foreach item="clause" collection="whereClause" separator=" AND " open="(" close=")"> 
	                ${clause.column} ${clause.operator} #{clause.value} 
	            </foreach> 
			</if>
		</trim>
	</select>
	<insert id="save" parameterType="Landblock">
		insert into
		<include refid="tablename" />
		(
		<include refid="fieldsForInsert" />,memo
		)
		values(#{blockNumber},#{blockTypeId},#{landTypeId},#{cooperativeId},#{area},#{cropTypeId},#{zipcode},#{memo})
	</insert>
	<select id="get" resultMap="landblockRs" parameterType="Integer">
		select
		<include refid="fields" />, memo
		from
		<include refid="tablename" />
		where id=${id}
	</select>
	<update id="update" parameterType="Landblock">
		update
		<include refid="tablename" />
		set
		blockNumber=#{blockNumber},blockTypeId=#{blockTypeId},landTypeId=#{landTypeId},memo=#{memo},cooperativeId=#{cooperativeId},area=#{area},cropTypeId=#{cropTypeId},zipcode=#{zipcode}
		where id=#{id}
	</update>
	<delete id="delete" parameterType="Landblock">
		delete from
		<include refid="tablename" />
		where id=#{id}
	</delete>
	<!-- 
	<select id="getCapacityById" resultMap="warehouseCapacityRs"
		parameterType="Integer">
		select sum(core_capacity) as core_capacity,
		sum(related_capacity) as related_capacity,
		sum(common_capacity) as
		common_capacity,
		sum(core_current_amount) as core_current_amount,
		sum(related_current_amount) as related_current_amount,
		sum(common_current_amount) as common_current_amount

		from stm_area as t1
		left join stm_region as t2 on t1.region_id=t2.id

		where t2.warehouse_id =${id}
	</select> -->
</mapper>
