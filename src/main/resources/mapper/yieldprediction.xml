<?xml version="1.0" encoding="UTF-8" ?>    
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.onemap.dao.YieldPredictionDao">
	
	<resultMap type="YieldPrediction" id="YieldPredictionRs">
		<result column="id" property="id" />
		<result column="blockId" property="blockId" />
		<result column="cropTypeId" property="cropTypeId" />
		<result column="blockNumber" property="blockNumber" />
		<result column="cropType" property="cropType" />
		<result column="predictTime" property="predictTime" />
		<result column="predictYield" property="predictYield" />
		<result column="actualYield" property="actualYield" />	
		
		<result column="queryBeginTime" property="queryBeginTime" />
		<result column="queryEndTime" property="queryEndTime" />
		<collection property="whereClause" ofType="Clause">			
		</collection>	
	</resultMap>	
	
	<sql id="fieldsForInsert">
		blockId,cropTypeId,predictTime,predictYield,actualYield
	</sql>
	<sql id="fields">
		id,<include refid="fieldsForInsert" />
	</sql>
	<sql id="tablename">
		YieldPrediction
	</sql>
	<select id="list" resultMap="YieldPredictionRs" parameterType="YieldPrediction">
		select YieldPrediction.id as id, YieldPrediction.blockId as blockId, YieldPrediction.cropTypeId as cropTypeId,
		YieldPrediction.predictTime,YieldPrediction.predictYield,YieldPrediction.actualYield,cropType.cropType as cropType,
		landblock.blockNumber as blockNumber 
		from
		<include refid="tablename" />
		left outer join cropType on YieldPrediction.cropTypeId=cropType.id 
		left outer join landblock on YieldPrediction.blockId=landblock.id   
		<trim prefix="where" prefixOverrides="and |or">
			<if test="blockId != null">
				YieldPrediction.blockId = #{blockId}
			</if> 
			<if test="cropTypeId != null">
				and YieldPrediction.cropTypeId = #{cropTypeId}
			</if>
			<if test="queryBeginTime != null and queryEndTime != null">
				and (date(predictTime) between #{queryBeginTime} and #{queryEndTime})
			</if>
		</trim>
		order by YieldPrediction.predictTime,YieldPrediction.id, YieldPrediction.blockId,YieldPrediction.cropTypeId asc
	</select>
	<select id="listByCropType" resultMap="YieldPredictionRs" parameterType="YieldPrediction">
		select YieldPrediction.blockId as blockId, YieldPrediction.cropTypeId as cropTypeId,
		cropType.cropType as cropType,landblock.blockNumber as blockNumber 
		from
		<include refid="tablename" />
		left outer join cropType on YieldPrediction.cropTypeId=cropType.id 
		left outer join landblock on YieldPrediction.blockId=landblock.id   
		
		<trim prefix="where" prefixOverrides="and |or">
			<if test="blockId != null">
				YieldPrediction.blockId = #{blockId}
			</if> 
			<if test="cropTypeId != null">
				and YieldPrediction.cropTypeId = #{cropTypeId}
			</if>
			<if test="queryBeginTime != null and queryEndTime != null">
				and (date(predictTime) between #{queryBeginTime} and #{queryEndTime})
			</if>
		</trim>
		group by YieldPrediction.blockId,YieldPrediction.cropTypeId,cropType.cropType,landblock.blockNumber
		
	</select>
	<select id="listByLimit" resultMap="YieldPredictionRs" parameterType="YieldPrediction">
		select YieldPrediction.id as id, YieldPrediction.blockId as blockId, YieldPrediction.cropTypeId as cropTypeId,
		YieldPrediction.predictTime,YieldPrediction.predictYield,YieldPrediction.actualYield,cropType.cropType as cropType,
		landblock.blockNumber as blockNumber 
		from
		<include refid="tablename" />
		left outer join cropType on YieldPrediction.cropTypeId=cropType.id 
		left outer join landblock on YieldPrediction.blockId=landblock.id   
		<trim prefix="where" prefixOverrides="and |or">
			<if test="blockId != null">
				YieldPrediction.blockId = #{blockId}
			</if> 
			<if test="cropTypeId != null">
				and YieldPrediction.cropTypeId = #{cropTypeId}
			</if>
			<if test="queryBeginTime != null and queryEndTime != null">
				and (date(predictTime) between #{queryBeginTime} and #{queryEndTime})
			</if>
			<if test="whereClause != null">
				<foreach item="clause" collection="whereClause" separator=" AND " open="(" close=")"> 
	                ${clause.column} ${clause.operator} #{clause.value} 
	            </foreach> 
			</if>
		</trim>
		<if test="orderBy != null and order != null">
			order by ${orderBy} ${order}
		</if>
		 limit #{startPos} ,#{pageSize} 
	</select>
	<insert id="save" parameterType="YieldPrediction">
		insert into
		<include refid="tablename" />
		(
		<include refid="fieldsForInsert" />
		)
		values(#{blockId},#{cropTypeId},#{predictTime},#{predictYield},#{actualYield})
	</insert>
	<select id="get" resultMap="YieldPredictionRs" parameterType="Integer">
		select
		<include refid="fields" />
		from
		<include refid="tablename" />
		where id=${id}
	</select>
	<select id="count" resultType="Integer" parameterType="YieldPrediction">
		select
		count(*)
		from
		<include refid="tablename" />	
		left outer join cropType on YieldPrediction.cropTypeId=cropType.id 
		left outer join landblock on YieldPrediction.blockId=landblock.id   
		<trim prefix="where" prefixOverrides="and |or">
			<if test="blockId != null">
				YieldPrediction.blockId = #{blockId}
			</if> 
			<if test="cropTypeId != null">
				and YieldPrediction.cropTypeId = #{cropTypeId}
			</if>
			<if test="queryBeginTime != null and queryEndTime != null">
				and (date(predictTime) between #{queryBeginTime} and #{queryEndTime})
			</if>
			<if test="whereClause != null">
				<foreach item="clause" collection="whereClause" separator=" AND " open="(" close=")"> 
	                ${clause.column} ${clause.operator} #{clause.value} 
	            </foreach> 
			</if>
		</trim>
	</select>
	<!-- 
	-->
	<update id="update" parameterType="YieldPrediction">
		update
		<include refid="tablename" />
		set
		blockId=#{blockId},cropTypeId=#{cropTypeId},predictTime=#{predictTime},predictYield=#{predictYield},actualYield=#{actualYield}
		where id=#{id}
	</update>
	<delete id="delete" parameterType="YieldPrediction">
		delete from
		<include refid="tablename" />
		where id=#{id}
	</delete>
</mapper>
